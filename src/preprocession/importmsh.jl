
"""
set_memory_ùù≠!(ap::T,ss::Symbol...) where T<:AbstractElement
"""
# const shape_function = (
#     ùù≠=(:ùù≠,),‚àáùù≠=(:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy,:‚àÇùù≠‚àÇz),‚àá‚ÇÇùù≠=(:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy),‚àáÃÉ‚ÇÇùù≠=(:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy),
#     ‚àá¬≤ùù≠=(:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy,:‚àÇùù≠‚àÇz,:‚àÇ¬≤ùù≠‚àÇx¬≤,:‚àÇ¬≤ùù≠‚àÇx‚àÇy,:‚àÇ¬≤ùù≠‚àÇy¬≤,:‚àÇ¬≤ùù≠‚àÇx‚àÇz,:‚àÇ¬≤ùù≠‚àÇy‚àÇz,:‚àÇ¬≤ùù≠‚àÇz¬≤),
#     ‚àá¬≤‚ÇÇùù≠=(:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy,:‚àÇ¬≤ùù≠‚àÇx¬≤,:‚àÇ¬≤ùù≠‚àÇx‚àÇy,:‚àÇ¬≤ùù≠‚àÇy¬≤),‚àáÃÉ¬≤ùù≠=(:‚àÇ¬≤ùù≠‚àÇx¬≤,:‚àÇ¬≤ùù≠‚àÇx‚àÇy,:‚àÇ¬≤ùù≠‚àÇy¬≤),
#     ‚àá¬≥ùù≠=(:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy,:‚àÇ¬≤ùù≠‚àÇx¬≤,:‚àÇ¬≤ùù≠‚àÇx‚àÇy,:‚àÇ¬≤ùù≠‚àÇy¬≤,:‚àÇ¬≥ùù≠‚àÇx¬≥,:‚àÇ¬≥ùù≠‚àÇx¬≤‚àÇy,:‚àÇ¬≥ùù≠‚àÇx‚àÇy¬≤,:‚àÇ¬≥ùù≠‚àÇy¬≥),
#     ‚àá‚àáÃÉ¬≤ùù≠=(:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy,:‚àÇ¬≤ùù≠‚àÇx¬≤,:‚àÇ¬≤ùù≠‚àÇx‚àÇy,:‚àÇ¬≤ùù≠‚àÇy¬≤,:‚àÇ¬≤ùù≠‚àÇx¬≤_,:‚àÇ¬≤ùù≠‚àÇx‚àÇy_,:‚àÇ¬≤ùù≠‚àÇy¬≤_,:‚àÇ‚àÇ¬≤ùù≠‚àÇx¬≤‚àÇx,:‚àÇ‚àÇ¬≤ùù≠‚àÇx¬≤‚àÇy,:‚àÇ‚àÇ¬≤ùù≠‚àÇx‚àÇy‚àÇx,:‚àÇ‚àÇ¬≤ùù≠‚àÇx‚àÇy‚àÇy,:‚àÇ‚àÇ¬≤ùù≠‚àÇy¬≤‚àÇx,:‚àÇ‚àÇ¬≤ùù≠‚àÇy¬≤‚àÇy,:‚àÇ‚àÇ¬≤ùù≠‚àÇx¬≤‚àÇx_,:‚àÇ‚àÇ¬≤ùù≠‚àÇx¬≤‚àÇy_,:‚àÇ‚àÇ¬≤ùù≠‚àÇx‚àÇy‚àÇx_,:‚àÇ‚àÇ¬≤ùù≠‚àÇx‚àÇy‚àÇy_,:‚àÇ‚àÇ¬≤ùù≠‚àÇy¬≤‚àÇx_,:‚àÇ‚àÇ¬≤ùù≠‚àÇy¬≤‚àÇy_),
#     test=(:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇx_)
# )
# const moment_matrix = (
#     ùù≠=(:ùó†,),‚àáùù≠=(:ùó†,:‚àÇùó†‚àÇx,:‚àÇùó†‚àÇy,:‚àÇùó†‚àÇz),‚àá‚ÇÇùù≠=(:ùó†,:‚àÇùó†‚àÇx,:‚àÇùó†‚àÇy),‚àáÃÉ‚ÇÇùù≠=(:‚àáÃÉ,),
#     ‚àá¬≤ùù≠=(:ùó†,:‚àÇùó†‚àÇx,:‚àÇùó†‚àÇy,:‚àÇùó†‚àÇz,:‚àÇ¬≤ùó†‚àÇx¬≤,:‚àÇ¬≤ùó†‚àÇx‚àÇy,:‚àÇ¬≤ùó†‚àÇy¬≤,:‚àÇ¬≤ùó†‚àÇx‚àÇz,:‚àÇ¬≤ùó†‚àÇy‚àÇz,:‚àÇ¬≤ùó†‚àÇz¬≤),
#     ‚àá¬≤‚ÇÇùù≠=(:ùó†,:‚àÇùó†‚àÇx,:‚àÇùó†‚àÇy,:‚àÇ¬≤ùó†‚àÇx¬≤,:‚àÇ¬≤ùó†‚àÇx‚àÇy,:‚àÇ¬≤ùó†‚àÇy¬≤),‚àáÃÉ¬≤ùù≠=(:‚àáÃÉ¬≤,),
#     ‚àá¬≥ùù≠=(:ùó†,:‚àÇùó†‚àÇx,:‚àÇùó†‚àÇy,:‚àÇ¬≤ùó†‚àÇx¬≤,:‚àÇ¬≤ùó†‚àÇx‚àÇy,:‚àÇ¬≤ùó†‚àÇy¬≤,:‚àÇ¬≥ùó†‚àÇx¬≥,:‚àÇ¬≥ùó†‚àÇx¬≤‚àÇy,:‚àÇ¬≥ùó†‚àÇx‚àÇy¬≤,:‚àÇ¬≥ùó†‚àÇy¬≥),
#     ‚àá‚àáÃÉ¬≤ùù≠=(:ùó†,:‚àÇùó†‚àÇx,:‚àÇùó†‚àÇy,:‚àáÃÉ¬≤,:‚àÇ‚àáÃÉ¬≤‚àÇŒæ,:‚àÇ‚àáÃÉ¬≤‚àÇŒ∑),
#     test=(:ùó†,:‚àÇùó†‚àÇx,:‚àáÃÉ)
# )
# function set_memory_ùù≠!(aps::Vector{T},ss::Symbol...) where T<:AbstractElement
#     n = getn‚Çõ(aps)
#     data = getfield(aps[1].ùìñ[1],:data)
#     for s in ss
#         push!(data,s=>(4,zeros(n)))
#     end
# end

"""
set_memory_ùó†!(aps::Vector{T},ss::Symbol...) where T<:ReproducingKernel
"""
# function set_memory_ùó†!(aps::Vector{T},ss::Symbol...) where T<:ReproducingKernel
#     data = getfield(aps[1].ùìñ[1],:data)
#     for s in ss
#         if s == :‚àáÃÉ
#             n = getùëõùíë‚ÇÅ(aps[1])
#         elseif s ‚àà (:‚àáÃÉ¬≤,:‚àÇ‚àáÃÉ¬≤‚àÇŒæ,:‚àÇ‚àáÃÉ¬≤‚àÇŒ∑)
#             n = getùëõùíë‚ÇÇ(aps[1])
#         else
#             n = getùëõùíë(aps[1])
#         end
#         m = Int(n*(n+1)/2)
#         push!(data,s=>(0,zeros(m)))
#     end
# end

# function set_memory_ùó†!(ap::T,ss::Symbol... = keys(ap[1].ùó†)...) where T<:ReproducingKernel
#     n = getùëõùíë(ap)
#     empty!(ap.ùó†)
#     for s in ss
#         if s == :‚àáÃÉ
#             n‚ÇÅ = getùëõùíë‚ÇÅ(ap)
#             ap.ùó†[s] = SymMat(n‚ÇÅ)
#         elseif s ‚àà (:‚àáÃÉ¬≤,:‚àÇ‚àáÃÉ¬≤‚àÇŒæ,:‚àÇ‚àáÃÉ¬≤‚àÇŒ∑)
#             n‚ÇÇ = getùëõùíë‚ÇÇ(ap)
#             ap.ùó†[s] = SymMat(n‚ÇÇ)
#         else
#             ap.ùó†[s] = SymMat(n)
#         end
#     end
# end

"""
importmsh
"""
function importmsh(filename::String)
    fid = open(filename,"r")
    readline(fid)
    line = readline(fid)
    v_,f_,d_ = split(line," ")
    version = parse(Float64,v_)
    filetype = parse(Int,f_)
    datasize = parse(Int,d_)
    readline(fid)
    if version == 4.1
        elements,nodes = import_msh_4(fid)
    elseif version == 2.2
        elements,nodes = import_msh_2(fid)
    else
        println("Version does not match!")
    end
    return elements, nodes
end

function import_msh_4(fid::IO) end

function import_msh_2(fid::IO)
    etype = Dict(1=>:Seg2,2=>:Tri3,3=>:Quad4,8=>:Seg3,9=>:Tri6,15=>:Poi1)
    nodes = Dict{Symbol,Vector{Float64}}()
    elements = Dict{String,Any}()
    physicalnames = Dict{Int,String}()
    for line in eachline(fid)
        if line == "\$PhysicalNames"
            numPhysicalNames = parse(Int,readline(fid))
            physicalnames=>Dict{Int,String}()
            for i in 1:numPhysicalNames
                line = readline(fid)
                d_,p_,n_ = split(line," ")
                dimension = parse(Int,d_)
                physicalTag = parse(Int,p_)
                name = strip(n_,'\"')
                physicalnames[physicalTag] = name
            end
            readline(fid)
        elseif line == "\$Nodes"
            line = readline(fid)
            n‚Çö = parse(Int,line)
            x = zeros(n‚Çö)
            y = zeros(n‚Çö)
            z = zeros(n‚Çö)
            for i in 1:n‚Çö
                line = readline(fid)
                t_,x_,y_,z_ = split(line," ")
                tag = parse(Int,t_)
                x[i] = parse(Float64,x_)
                y[i] = parse(Float64,y_)
                z[i] = parse(Float64,z_)
            end
            nodes[:x] = x
            nodes[:y] = y
            nodes[:z] = z
            nodes = Node(nodes...)
            readline(fid)
        elseif line == "\$Elements"
            line = readline(fid)
            n‚Çë = parse(Int,line)
            for i in 1:n‚Çë
                line = readline(fid)
                entries = split(line," ")
                elmN_ = entries[1]
                elmT_ = entries[2]
                numT_ = entries[3]
                phyT_ = entries[4]
                elmE_ = entries[5]
                l_ = entries[6:end]
                elmNumber = parse(Int,elmN_)
                elmType = parse(Int,elmT_)
                numTag = parse(Int,numT_)
                phyTag = parse(Int,phyT_)
                elmEntary = parse(Int,elmE_)
                nodeList = parse.(Int,l_)
                name = physicalnames[phyTag]
                type = etype[elmType]
                haskey(elements,name) ? push!(elements[name],Element{type}([nodes[i] for i in nodeList])) : elements[name]=Element{type}[Element{type}([nodes[i] for i in nodeList])]
            end
        end
    end
    return elements, nodes
end
