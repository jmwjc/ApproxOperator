
abstract type AbstractGeometry end
abstract type AbstractSegment<:AbstractGeometry end
abstract type AbstractSurface<:AbstractGeometry end
abstract type AbstractVolume<:AbstractGeometry end
abstract type AbstractTriangle<:AbstractSurface end
abstract type AbstracQuadrilateralt<:AbstractSurface end
abstract type AbstractTetrahedron<:AbstractVolume end

struct Point
    i::Int
    x::Float64
    y::Float64
    z::Float64
end

struct Seg2<:AbstractSegment
    vertices::NTuple{2,Point}
end

struct Seg3<:AbstractSegment
    vertices::NTuple{3,Point}
end

struct Tri3<:AbstractTriangle
    vertices::NTuple{3,Point}
    edges::NTuple{3,Seg2}
end

struct Tri6<:AbstractTriangle
    vertices::NTuple{6,Point}
    edges::NTuple{3,Seg3}
end

struct Quad4<:AbstracQuadrilateralt
    vertices::NTuple{4,Point}
    edges::NTuple{4,Seg2}
end

struct Quad9<:AbstracQuadrilateralt
    vertices::NTuple{9,Point}
    edges::NTuple{4,Seg3}
end

struct Tet4<:AbstractTetrahedron
    vertices::NTuple{4,Point}
    edges::NTuple{6,Seg2}
    surfaces::NTuple{4,Tri3}
end

function (a::Seg2)(Œæ::Float64)
    v‚ÇÅ = a.vertices[1]
    v‚ÇÇ = a.vertices[2]
    x‚ÇÅ = v‚ÇÅ.x
    y‚ÇÅ = v‚ÇÅ.y
    z‚ÇÅ = v‚ÇÅ.z
    x‚ÇÇ = v‚ÇÇ.x
    y‚ÇÇ = v‚ÇÇ.y
    z‚ÇÇ = v‚ÇÇ.z
    N‚ÇÅ = 0.5*(1.0-Œæ)
    N‚ÇÇ = 0.5*(1.0+Œæ)
    return N‚ÇÅ*x‚ÇÅ+N‚ÇÇ*x‚ÇÇ,
           N‚ÇÅ*y‚ÇÅ+N‚ÇÇ*y‚ÇÇ,
           N‚ÇÅ*z‚ÇÅ+N‚ÇÇ*z‚ÇÇ
end

function (a::Seg2)(v::Point)
    i = findfirst(x->x==v,a.vertices)
    if i == 1
        return -1.0
    elseif i == 2
        return 1.0
    else
        return nothing
    end
end

function (a::Seg3)(Œæ::Float64)
    v‚ÇÅ = a.vertices[1]
    v‚ÇÇ = a.vertices[2]
    v‚ÇÉ = a.vertices[3]
    x‚ÇÅ = v‚ÇÅ.x
    y‚ÇÅ = v‚ÇÅ.y
    z‚ÇÅ = v‚ÇÅ.z
    x‚ÇÇ = v‚ÇÇ.x
    y‚ÇÇ = v‚ÇÇ.y
    z‚ÇÇ = v‚ÇÇ.z
    x‚ÇÉ = v‚ÇÉ.x
    y‚ÇÉ = v‚ÇÉ.y
    z‚ÇÉ = v‚ÇÉ.z
    N‚ÇÅ = 0.5*Œæ*(Œæ-1.0)
    N‚ÇÇ = 1.0-Œæ^2
    N‚ÇÉ = 0.5*Œæ*(Œæ+1.0)
    return N‚ÇÅ*x‚ÇÅ+N‚ÇÇ*x‚ÇÇ+N‚ÇÉ*x‚ÇÉ,
           N‚ÇÅ*y‚ÇÅ+N‚ÇÇ*y‚ÇÇ+N‚ÇÉ*y‚ÇÉ,
           N‚ÇÅ*z‚ÇÅ+N‚ÇÇ*z‚ÇÇ+N‚ÇÉ*z‚ÇÉ
end

function (a::Seg3)(v::Point)
    i = findfirst(x->x==v,a.vertices)
    if i == 1
        return -1.0
    elseif i == 3
        return 1.0
    else
        return nothing
    end
end

function (a::Tri3)(Œæ::Float64,Œ∑::Float64)
    v‚ÇÅ = a.vertices[1]
    v‚ÇÇ = a.vertices[2]
    v‚ÇÉ = a.vertices[3]
    x‚ÇÅ = v‚ÇÅ.x
    y‚ÇÅ = v‚ÇÅ.y
    z‚ÇÅ = v‚ÇÅ.z
    x‚ÇÇ = v‚ÇÇ.x
    y‚ÇÇ = v‚ÇÇ.y
    z‚ÇÇ = v‚ÇÇ.z
    x‚ÇÉ = v‚ÇÉ.x
    y‚ÇÉ = v‚ÇÉ.y
    z‚ÇÉ = v‚ÇÉ.z
    N‚ÇÅ = Œæ
    N‚ÇÇ = Œ∑
    N‚ÇÉ = 1.0-Œæ-Œ∑
    return N‚ÇÅ*x‚ÇÅ+N‚ÇÇ*x‚ÇÇ+N‚ÇÉ*x‚ÇÉ,
           N‚ÇÅ*y‚ÇÅ+N‚ÇÇ*y‚ÇÇ+N‚ÇÉ*y‚ÇÉ,
           N‚ÇÅ*z‚ÇÅ+N‚ÇÇ*z‚ÇÇ+N‚ÇÉ*z‚ÇÉ
end

function (a::Tri3)(v::Point)
    i = findfirst(x->x==v,a.vertices)
    if i == 1
        return 1.0,0.0
    elseif i == 2
        return 0.0,1.0
    elseif i == 3
        return 0.0,0.0
    else
        return nothing
    end
end

function (a::Tri3)(e::Seg2,Œæ::Float64)
    i = findfirst(x->x==e,a.edges)
    if i == 1
        return 0.0,0.5*(1.0-Œæ)
    elseif i == 2
        return 0.5*(1.0+Œæ),0.0
    elseif i == 3
        return 0.5*(1.0-Œæ),0.5*(1.0+Œæ)
    else
        return nothing
    end
end

function (a::Tri6)(Œæ::Float64,Œ∑::Float64)
    Œ≥ = 1.0-Œæ-Œ∑
    x‚ÇÅ = a.vertices[1].x;y‚ÇÅ = a.vertices[1].y;z‚ÇÅ = a.vertices[1].z
    x‚ÇÇ = a.vertices[2].x;y‚ÇÇ = a.vertices[2].y;z‚ÇÇ = a.vertices[2].z
    x‚ÇÉ = a.vertices[3].x;y‚ÇÉ = a.vertices[3].y;z‚ÇÉ = a.vertices[3].z
    x‚ÇÑ = a.vertices[4].x;y‚ÇÑ = a.vertices[4].y;z‚ÇÑ = a.vertices[4].z
    x‚ÇÖ = a.vertices[5].x;y‚ÇÖ = a.vertices[5].y;z‚ÇÖ = a.vertices[5].z
    x‚ÇÜ = a.vertices[6].x;y‚ÇÜ = a.vertices[6].y;z‚ÇÜ = a.vertices[6].z
    N‚ÇÅ = Œæ*(2*Œæ-1)
    N‚ÇÇ = Œ∑*(2*Œ∑-1)
    N‚ÇÉ = Œ≥*(2*Œ≥-1)
    N‚ÇÑ = 4*Œæ*Œ∑
    N‚ÇÖ = 4*Œ∑*Œ≥
    N‚ÇÜ = 4*Œ≥*Œæ
    return x‚ÇÅ*N‚ÇÅ+x‚ÇÇ*N‚ÇÇ+x‚ÇÉ*N‚ÇÉ+x‚ÇÑ*N‚ÇÑ+x‚ÇÖ*N‚ÇÖ+x‚ÇÜ*N‚ÇÜ,
           y‚ÇÅ*N‚ÇÅ+y‚ÇÇ*N‚ÇÇ+y‚ÇÉ*N‚ÇÉ+y‚ÇÑ*N‚ÇÑ+y‚ÇÖ*N‚ÇÖ+y‚ÇÜ*N‚ÇÜ,
           z‚ÇÅ*N‚ÇÅ+z‚ÇÇ*N‚ÇÇ+z‚ÇÉ*N‚ÇÉ+z‚ÇÑ*N‚ÇÑ+z‚ÇÖ*N‚ÇÖ+z‚ÇÜ*N‚ÇÜ
end

function getùê¥(a::Tri3)
    x‚ÇÅ = a.vertices[1].x
    x‚ÇÇ = a.vertices[2].x
    x‚ÇÉ = a.vertices[3].x
    y‚ÇÅ = a.vertices[1].y
    y‚ÇÇ = a.vertices[2].y
    y‚ÇÉ = a.vertices[3].y
    z‚ÇÅ = a.vertices[1].z
    z‚ÇÇ = a.vertices[2].z
    z‚ÇÉ = a.vertices[3].z

    return 0.5*(x‚ÇÅ*y‚ÇÇ+x‚ÇÇ*y‚ÇÉ+x‚ÇÉ*y‚ÇÅ-x‚ÇÇ*y‚ÇÅ-x‚ÇÉ*y‚ÇÇ-x‚ÇÅ*y‚ÇÉ)
end