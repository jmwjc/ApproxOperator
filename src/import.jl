
"""
set_memory_ùù≠!(ap::T,ss::Symbol...) where T<:AbstractElement
"""
const shape_function = (
    ùù≠=(:ùù≠,),‚àáùù≠=(:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy,:‚àÇùù≠‚àÇz),‚àá‚ÇÇùù≠=(:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy),‚àáÃÉ‚ÇÇùù≠=(:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy),
    ‚àá¬≤ùù≠=(:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy,:‚àÇùù≠‚àÇz,:‚àÇ¬≤ùù≠‚àÇx¬≤,:‚àÇ¬≤ùù≠‚àÇx‚àÇy,:‚àÇ¬≤ùù≠‚àÇy¬≤,:‚àÇ¬≤ùù≠‚àÇx‚àÇz,:‚àÇ¬≤ùù≠‚àÇy‚àÇz,:‚àÇ¬≤ùù≠‚àÇz¬≤),
    ‚àá¬≤‚ÇÇùù≠=(:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy,:‚àÇ¬≤ùù≠‚àÇx¬≤,:‚àÇ¬≤ùù≠‚àÇx‚àÇy,:‚àÇ¬≤ùù≠‚àÇy¬≤),‚àáÃÉ¬≤ùù≠=(:‚àÇ¬≤ùù≠‚àÇx¬≤,:‚àÇ¬≤ùù≠‚àÇx‚àÇy,:‚àÇ¬≤ùù≠‚àÇy¬≤),
    ‚àá¬≥ùù≠=(:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy,:‚àÇ¬≤ùù≠‚àÇx¬≤,:‚àÇ¬≤ùù≠‚àÇx‚àÇy,:‚àÇ¬≤ùù≠‚àÇy¬≤,:‚àÇ¬≥ùù≠‚àÇx¬≥,:‚àÇ¬≥ùù≠‚àÇx¬≤‚àÇy,:‚àÇ¬≥ùù≠‚àÇx‚àÇy¬≤,:‚àÇ¬≥ùù≠‚àÇy¬≥),
    ‚àá‚àáÃÉ¬≤ùù≠=(:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy,:‚àÇ¬≤ùù≠‚àÇx¬≤,:‚àÇ¬≤ùù≠‚àÇx‚àÇy,:‚àÇ¬≤ùù≠‚àÇy¬≤,:‚àÇ¬≤ùù≠‚àÇx¬≤_,:‚àÇ¬≤ùù≠‚àÇx‚àÇy_,:‚àÇ¬≤ùù≠‚àÇy¬≤_,:‚àÇ‚àÇ¬≤ùù≠‚àÇx¬≤‚àÇx,:‚àÇ‚àÇ¬≤ùù≠‚àÇx¬≤‚àÇy,:‚àÇ‚àÇ¬≤ùù≠‚àÇx‚àÇy‚àÇx,:‚àÇ‚àÇ¬≤ùù≠‚àÇx‚àÇy‚àÇy,:‚àÇ‚àÇ¬≤ùù≠‚àÇy¬≤‚àÇx,:‚àÇ‚àÇ¬≤ùù≠‚àÇy¬≤‚àÇy,:‚àÇ‚àÇ¬≤ùù≠‚àÇx¬≤‚àÇx_,:‚àÇ‚àÇ¬≤ùù≠‚àÇx¬≤‚àÇy_,:‚àÇ‚àÇ¬≤ùù≠‚àÇx‚àÇy‚àÇx_,:‚àÇ‚àÇ¬≤ùù≠‚àÇx‚àÇy‚àÇy_,:‚àÇ‚àÇ¬≤ùù≠‚àÇy¬≤‚àÇx_,:‚àÇ‚àÇ¬≤ùù≠‚àÇy¬≤‚àÇy_),
    ‚àáÃÉ·µ•‚ÇÇùù≠=(:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy),
    test=(:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇx_)
)
const moment_matrix = (
    ùù≠=(:ùó†,),‚àáùù≠=(:ùó†,:‚àÇùó†‚àÇx,:‚àÇùó†‚àÇy,:‚àÇùó†‚àÇz),‚àá‚ÇÇùù≠=(:ùó†,:‚àÇùó†‚àÇx,:‚àÇùó†‚àÇy),‚àáÃÉ‚ÇÇùù≠=(:‚àáÃÉ,),
    ‚àá¬≤ùù≠=(:ùó†,:‚àÇùó†‚àÇx,:‚àÇùó†‚àÇy,:‚àÇùó†‚àÇz,:‚àÇ¬≤ùó†‚àÇx¬≤,:‚àÇ¬≤ùó†‚àÇx‚àÇy,:‚àÇ¬≤ùó†‚àÇy¬≤,:‚àÇ¬≤ùó†‚àÇx‚àÇz,:‚àÇ¬≤ùó†‚àÇy‚àÇz,:‚àÇ¬≤ùó†‚àÇz¬≤),
    ‚àá¬≤‚ÇÇùù≠=(:ùó†,:‚àÇùó†‚àÇx,:‚àÇùó†‚àÇy,:‚àÇ¬≤ùó†‚àÇx¬≤,:‚àÇ¬≤ùó†‚àÇx‚àÇy,:‚àÇ¬≤ùó†‚àÇy¬≤),‚àáÃÉ¬≤ùù≠=(:‚àáÃÉ¬≤,),
    ‚àá¬≥ùù≠=(:ùó†,:‚àÇùó†‚àÇx,:‚àÇùó†‚àÇy,:‚àÇ¬≤ùó†‚àÇx¬≤,:‚àÇ¬≤ùó†‚àÇx‚àÇy,:‚àÇ¬≤ùó†‚àÇy¬≤,:‚àÇ¬≥ùó†‚àÇx¬≥,:‚àÇ¬≥ùó†‚àÇx¬≤‚àÇy,:‚àÇ¬≥ùó†‚àÇx‚àÇy¬≤,:‚àÇ¬≥ùó†‚àÇy¬≥),
    ‚àá‚àáÃÉ¬≤ùù≠=(:ùó†,:‚àÇùó†‚àÇx,:‚àÇùó†‚àÇy,:‚àáÃÉ¬≤,:‚àÇ‚àáÃÉ¬≤‚àÇŒæ,:‚àÇ‚àáÃÉ¬≤‚àÇŒ∑),
    ‚àáÃÉ·µ•‚ÇÇùù≠=(:ùó†,:‚àáÃÉ),
    test=(:ùó†,:‚àÇùó†‚àÇx,:‚àáÃÉ)
)
function set_memory_ùù≠!(aps::Vector{T},ss::Symbol...) where T<:AbstractElement
    n = getn‚Çõ(aps)
    data = getfield(aps[1].ùìñ[1],:data)
    for s in ss
        push!(data,s=>(4,zeros(n)))
    end
end

"""
set_memory_ùó†!(aps::Vector{T},ss::Symbol...) where T<:ReproducingKernel
"""
function set_memory_ùó†!(aps::Vector{T},ss::Symbol...) where T<:ReproducingKernel
    data = getfield(aps[1].ùìñ[1],:data)
    for s in ss
        if s == :‚àáÃÉ
            n = getùëõùíë‚ÇÅ(aps[1])
        elseif s ‚àà (:‚àáÃÉ¬≤,:‚àÇ‚àáÃÉ¬≤‚àÇŒæ,:‚àÇ‚àáÃÉ¬≤‚àÇŒ∑)
            n = getùëõùíë‚ÇÇ(aps[1])
        else
            n = getùëõùíë(aps[1])
        end
        m = Int(n*(n+1)/2)
        push!(data,s=>(0,zeros(m)))
    end
end

function set_memory_ùó†!(ap::T,ss::Symbol... = keys(ap[1].ùó†)...) where T<:ReproducingKernel
    n = getùëõùíë(ap)
    empty!(ap.ùó†)
    for s in ss
        if s == :‚àáÃÉ
            n‚ÇÅ = getùëõùíë‚ÇÅ(ap)
            ap.ùó†[s] = SymMat(n‚ÇÅ)
        elseif s ‚àà (:‚àáÃÉ¬≤,:‚àÇ‚àáÃÉ¬≤‚àÇŒæ,:‚àÇ‚àáÃÉ¬≤‚àÇŒ∑)
            n‚ÇÇ = getùëõùíë‚ÇÇ(ap)
            ap.ùó†[s] = SymMat(n‚ÇÇ)
        else
            ap.ùó†[s] = SymMat(n)
        end
    end
end

"""
importmsh
"""
function importmsh(filename::String)
    fid = open(filename,"r")
    readline(fid)
    line = readline(fid)
    v_,f_,d_ = split(line," ")
    version = parse(Float64,v_)
    filetype = parse(Int,f_)
    datasize = parse(Int,d_)
    readline(fid)
    if version == 4.1
        elements,nodes = import_msh_4(fid)
    elseif version == 2.2
        elements,nodes = import_msh_2(fid)
    else
        println("Version does not match!")
    end
    return elements, nodes
end

function import_msh_4(fid::IO) end

function import_msh_2(fid::IO)
    etype = Dict(1=>:Seg2,2=>:Tri3,3=>:Quad,8=>:Seg3,9=>:Tri6,15=>:Poi1)
    nodes = Dict{Symbol,Vector{Float64}}()
    elements = Dict{String,Any}()
    physicalnames = Dict{Int,String}()
    for line in eachline(fid)
        if line == "\$PhysicalNames"
            numPhysicalNames = parse(Int,readline(fid))
            physicalnames=>Dict{Int,String}()
            for i in 1:numPhysicalNames
                line = readline(fid)
                d_,p_,n_ = split(line," ")
                dimension = parse(Int,d_)
                physicalTag = parse(Int,p_)
                name = strip(n_,'\"')
                physicalnames[physicalTag] = name
            end
            readline(fid)
        elseif line == "\$Nodes"
            line = readline(fid)
            n‚Çö = parse(Int,line)
            x = zeros(n‚Çö)
            y = zeros(n‚Çö)
            z = zeros(n‚Çö)
            for i in 1:n‚Çö
                line = readline(fid)
                t_,x_,y_,z_ = split(line," ")
                tag = parse(Int,t_)
                x[i] = parse(Float64,x_)
                y[i] = parse(Float64,y_)
                z[i] = parse(Float64,z_)
            end
            nodes[:x] = x
            nodes[:y] = y
            nodes[:z] = z
            nodes = Node(nodes...)
            readline(fid)
        elseif line == "\$Elements"
            line = readline(fid)
            n‚Çë = parse(Int,line)
            for i in 1:n‚Çë
                line = readline(fid)
                entries = split(line," ")
                elmN_ = entries[1]
                elmT_ = entries[2]
                numT_ = entries[3]
                phyT_ = entries[4]
                elmE_ = entries[5]
                l_ = entries[6:end]
                elmNumber = parse(Int,elmN_)
                elmType = parse(Int,elmT_)
                numTag = parse(Int,numT_)
                phyTag = parse(Int,phyT_)
                elmEntary = parse(Int,elmE_)
                nodeList = parse.(Int,l_)
                name = physicalnames[phyTag]
                type = etype[elmType]
                haskey(elements,name) ? push!(elements[name],Element{type}([nodes[i] for i in nodeList])) : elements[name]=Element{type}[Element{type}([nodes[i] for i in nodeList])]
            end
        end
    end
    return elements, nodes
end

function importmsh(filename::String,config::Dict{T,Any}) where T<:Any
    elms, nodes = importmsh(filename)
    return generate(elms,nodes,config)
end
function importmsh(file_elements::String,file_nodes::String,config::Dict{T,Any}) where T<:Any
    elms, nodes_ = importmsh(file_elements)
    elms_, nodes = importmsh(file_nodes)
    return generate(elms,nodes,config)
end
function generate(elms::Dict{String,Any},nodes::Vector{Node},config::Dict{T,Any}) where T<:Any
    elements = Dict{String,Any}()
    if haskey(config,"RegularGrid")
        x = getfield(nodes[1],:data)[:x][2]
        y = getfield(nodes[1],:data)[:y][2]
        z = getfield(nodes[1],:data)[:z][2]
        n = config["RegularGrid"]["n"]
        Œ≥ = config["RegularGrid"]["Œ≥"]
        sp = RegularGrid(x,y,z,n=n,Œ≥=Œ≥)
        delete!(config,"RegularGrid")
    else
        sp = nothing
    end
    if haskey(config,"BoundaryDofs")
        dofs,ndofs = getboundarydofs(elms["Œ©"])
        cfg = config["BoundaryDofs"]
        element_type = eval(Meta.parse(cfg["type"]))
        elements["‚àÇŒ©"] = Vector{element_type}(undef,ndofs)
        for (ids,n) in dofs
            elements["‚àÇŒ©"][n] = element_type([nodes[i] for i in ids],SNode[])
        end
        integration_type = Meta.parse(cfg["ùìñ"]["type"])
        setùìñ!(elements["‚àÇŒ©"],integration_type)
        delete!(config,"BoundaryDofs")
    end

    for (name,cfg) in config
         # setùìñ
        element_tag = cfg["ùìí"]["tag"]
        element_type = eval(Meta.parse(cfg["type"]))
        integration_tag = haskey(cfg["ùìñ"],"tag") ? cfg["ùìñ"]["tag"] : element_tag
        integration_type = Meta.parse(cfg["ùìñ"]["type"])
        elements[name] = element_type[]
        if haskey(elms,integration_tag)
            setùìñ!(elms[integration_tag],integration_type)
            if haskey(cfg["ùìñ"],"normal") setùíè!(elms[integration_tag]) end
            if integration_tag ‚â† element_tag
                elms[element_tag*"‚à©"*integration_tag] = unique!(elms[element_tag]‚à©elms[integration_tag])
                element_tag = element_tag*"‚à©"*integration_tag
                setùìñ!(elms[element_tag],elms[integration_tag])
            end
            if haskey(cfg["ùìñ"],"ùê∂")
                ùê∂_tag = cfg["ùìñ"]["ùê∂"]
                setùê∂!(elms[element_tag],elements[ùê∂_tag])
            end

            # set ùìí
            n‚Çë = length(elms[element_tag])
            if element_type<:Element
                for elm in elms[element_tag]
                    ùìí = [x for x in elm.ùìí]
                    ùìñ = [Œæ for Œæ in elm.ùìñ]
                    push!(elements[name],element_type(ùìí,ùìñ))
                end
            elseif element_type<:ReproducingKernel
                if haskey(cfg["ùìí"],"type")
                    for elm in elms[element_tag]
                        ùìñ = [Œæ for Œæ in elm.ùìñ]
                        push!(elements[name],element_type(Node[],ùìñ))
                    end
                    position_type= Meta.parse(cfg["ùìí"]["type"])
                    setùìñ!(elms[element_tag],position_type)
                    for (c,elm) in enumerate(elms[element_tag])
                        ùìí = [nodes[i] for i in sp(elm.ùìñ)]
                        push!(elements[name][c].ùìí,ùìí...)
                    end
                else
                    for elm in elms[element_tag]
                        ùìí = [nodes[i] for i in sp(elm.ùìí)]
                        ùìñ = [Œæ for Œæ in elm.ùìñ]
                        push!(elements[name],element_type(ùìí,ùìñ))
                    end
                end
                s = 0
                for elm in elements[name]
                    ùìñ = elm.ùìñ
                    data = getfield(ùìñ[1],:data)
                    n = length(elm.ùìí)
                    for (i,Œæ) in enumerate(ùìñ)
                        g = Œæ.ùëî
                        G = Œæ.ùê∫
                        C = Œæ.ùê∂
                        ùìñ[i] = SNode((g,G,C,s),data)
                        s += n
                    end
                end
            elseif element_type<:TRElement
                data = getfield(nodes[1],:data)
                for elm in elms[element_tag]
                    nodeList = (x.ùêº for x in elm.ùìí)
                    ùìí = [GNode((i,dofs[Set(setdiff(nodeList,i))]),data) for i in nodeList]
                    ùìñ = [Œæ for Œæ in elm.ùìñ]
                    push!(elements[name],element_type(ùìí,ùìñ))
                end
            end
            if contains(element_tag,"‚à©")
                element_tag_type = eval(Meta.parse(config[cfg["ùìí"]["tag"]]["type"]))
                element_tag_integration_type = Meta.parse(config[cfg["ùìí"]["tag"]]["ùìñ"]["type"])
                setùìñ!(elms[element_tag],element_tag_integration_type)
                elements[element_tag] = element_tag_type[]
                for elm in elms[element_tag]
                    ùìí = [nodes[i] for i in sp(elm.ùìí)]
                    ùìñ = [Œæ for Œæ in elm.ùìñ]
                    push!(elements[element_tag],element_tag_type(ùìí,ùìñ))
                end
                set_memory_ùù≠!(elements[element_tag],:ùù≠,:‚àÇùù≠‚àÇx,:‚àÇùù≠‚àÇy)
                set_memory_ùó†!(elements[element_tag],:ùó†,:‚àÇùó†‚àÇx,:‚àÇùó†‚àÇy)
            end

            # set shape memory
            if haskey(cfg,"ùìñ")
                if haskey(cfg["ùìñ"],"ùù≠") set_memory_ùù≠!(elements[name],shape_function[Meta.parse(cfg["ùìñ"]["ùù≠"])]...) end
                if element_type<:ReproducingKernel set_memory_ùó†!(elements[name],moment_matrix[Meta.parse(cfg["ùìñ"]["ùù≠"])]...) end
            end
        end
    end
    return elements,nodes
end

function getboundarydofs(elements::Vector{T}) where T<:AbstractElement{:Tri3}
    dofs = Dict{Set{Int},Int}()
    idBoundaries = ((1,2),(2,3),(3,1))
    n = 0
    for elm in elements
        ùìí = elm.ùìí
        for bc in idBoundaries
            dof = Set(ùìí[i].ùêº for i in bc)
            if ~haskey(dofs,dof)
                n += 1
                dofs[dof] = n
            end
        end
    end
    return dofs,n
end

function voronoimsh(filename::String)
    elms, nds = importmsh(filename)
    n·µ• = 0
    for (name,elm) in elms
        n·µ• += length(elm)
    end
    data = Dict{Symbol,Tuple{Int,Vector{Float64}}}()
    elements = Dict{String,Any}()
    ind = 0
    xv = Float64[]
    yv = Float64[]
    zv = Float64[]
    push!(data,:x=>(1,xv))
    push!(data,:y=>(1,yv))
    push!(data,:z=>(1,zv))
    nodelist = Dict(node=>Int[] for node in nds)
    nodelist_Œì·µó = Dict{Node,Vector{Int}}()
    nodelist_Œì·µç = Dict{Node,Vector{Int}}()
    normal = Dict{Node,Set{Tuple{Float64,Float64}}}()
    for (name,elm) in elms
        if contains(name,"Œ©")
            for el in elm
                ind += 1
                x‚ÇÅ = el.ùìí[1].x
                y‚ÇÅ = el.ùìí[1].y
                x‚ÇÇ = el.ùìí[2].x
                y‚ÇÇ = el.ùìí[2].y
                x‚ÇÉ = el.ùìí[3].x
                y‚ÇÉ = el.ùìí[3].y
                x‚Çò‚ÇÅ = 0.5*(x‚ÇÇ+x‚ÇÉ)
                y‚Çò‚ÇÅ = 0.5*(y‚ÇÇ+y‚ÇÉ)
                x‚Çò‚ÇÇ = 0.5*(x‚ÇÉ+x‚ÇÅ)
                y‚Çò‚ÇÇ = 0.5*(y‚ÇÉ+y‚ÇÅ)
                s‚ÇÅ = (y‚ÇÉ-y‚ÇÇ)/(x‚ÇÉ-x‚ÇÇ)
                s‚ÇÇ = (y‚ÇÅ-y‚ÇÉ)/(x‚ÇÅ-x‚ÇÉ)
                if x‚ÇÉ ‚âà x‚ÇÇ
                    xc = x‚Çò‚ÇÇ + s‚ÇÇ*(y‚Çò‚ÇÇ-y‚Çò‚ÇÅ)
                    yc = y‚Çò‚ÇÅ
                elseif x‚ÇÅ ‚âà x‚ÇÉ
                    xc = x‚Çò‚ÇÅ + s‚ÇÅ*(y‚Çò‚ÇÅ-y‚Çò‚ÇÇ)
                    yc = y‚Çò‚ÇÇ
                elseif y‚ÇÉ ‚âà y‚ÇÇ
                    xc = x‚Çò‚ÇÅ
                    yc = -1/s‚ÇÇ*(x‚Çò‚ÇÅ-x‚Çò‚ÇÇ)+y‚Çò‚ÇÇ
                elseif y‚ÇÅ ‚âà y‚ÇÉ
                    xc = x‚Çò‚ÇÇ
                    yc = -1/s‚ÇÅ*(x‚Çò‚ÇÇ-x‚Çò‚ÇÅ)+y‚Çò‚ÇÅ
                else
                    xc = (s‚ÇÅ*s‚ÇÇ*(y‚Çò‚ÇÅ-y‚Çò‚ÇÇ)+(s‚ÇÇ*x‚Çò‚ÇÅ-s‚ÇÅ*x‚Çò‚ÇÇ))/(s‚ÇÇ-s‚ÇÅ)
                    yc = ((s‚ÇÇ*y‚Çò‚ÇÇ-s‚ÇÅ*y‚Çò‚ÇÅ)+(x‚Çò‚ÇÇ-x‚Çò‚ÇÅ))/(s‚ÇÇ-s‚ÇÅ)
                end
                push!(xv,xc)
                push!(yv,yc)
                push!(zv,0.0)
                for x·µ¢ in el.ùìí
                    push!(nodelist[x·µ¢],ind)
                end
            end
        elseif contains(name,"Œì")
            for el in elm
                ind += 1
                x‚ÇÅ = el.ùìí[1].x
                y‚ÇÅ = el.ùìí[1].y
                x‚ÇÇ = el.ùìí[2].x
                y‚ÇÇ = el.ùìí[2].y
                L = ((x‚ÇÅ-x‚ÇÇ)^2+(y‚ÇÅ-y‚ÇÇ)^2)^0.5
                normal_ = ((y‚ÇÇ-y‚ÇÅ)/L,(x‚ÇÅ-x‚ÇÇ)/L)
                xc = 0.5*(x‚ÇÅ+x‚ÇÇ)
                yc = 0.5*(y‚ÇÅ+y‚ÇÇ)
                push!(xv,xc)
                push!(yv,yc)
                push!(zv,0.0)
                if name == "Œì·µç"
                    for x·µ¢ in el.ùìí
                        push!(nodelist[x·µ¢],ind)
                        haskey(nodelist_Œì·µç,x·µ¢) ? push!(nodelist_Œì·µç[x·µ¢],ind) : nodelist_Œì·µç[x·µ¢] = [ind]
                        haskey(normal,x·µ¢) ? push!(normal[x·µ¢],normal_) : normal[x·µ¢] = Set([normal_])
                    end
                elseif name == "Œì·µó"
                    for x·µ¢ in el.ùìí
                        push!(nodelist[x·µ¢],ind)
                        haskey(nodelist_Œì·µó,x·µ¢) ? push!(nodelist_Œì·µó[x·µ¢],ind) : nodelist_Œì·µó[x·µ¢] = [ind]
                        haskey(normal,x·µ¢) ? push!(normal[x·µ¢],normal_) : normal[x·µ¢] = Set([normal_])
                    end
                end
            end
        end
    end
    for (x·µ¢,normal_) in normal
        if length(normal_) ‚â† 1
            ind += 1
            push!(xv,x·µ¢.x)
            push!(yv,x·µ¢.y)
            push!(zv,0.0)
            push!(nodelist[x·µ¢],ind)
            if haskey(nodelist_Œì·µç,x·µ¢) push!(nodelist_Œì·µç[x·µ¢],ind) end
            if haskey(nodelist_Œì·µó,x·µ¢) push!(nodelist_Œì·µó[x·µ¢],ind) end
        end
    end
    nodes = [Node(i,data) for i in 1:ind]
    elements["Œ©"] = Element{:Vor2}[]
    elements["Œì·µó"] = Element{:Seg2}[]
    elements["Œì·µç"] = Element{:Seg2}[]
    # for (node,list) in nodelist
    for node in nds
        list = nodelist[node]
        # sort
        # cal centroid
        xc = 0.
        yc = 0.
        for i in list
            xc += xv[i]
            yc += yv[i]
        end
        xc = xc/length(list)
        yc = yc/length(list)
        Œ± = [atan(yv[i]-yc,xv[i]-xc) for i in list]
        p = sortperm(Œ±)
        push!(elements["Œ©"],Element{:Vor2}([nodes[list[i]] for i in p],SNode[]))
    end
    (xmin,xmax) = extrema(getfield(nds[1],:data)[:x][2])
    (ymin,ymax) = extrema(getfield(nds[1],:data)[:y][2])
    xc = 0.5*(xmin+xmax)
    yc = 0.5*(ymin+ymax)
    for (name,nodelist_) in (("Œì·µç",nodelist_Œì·µç),("Œì·µó",nodelist_Œì·µó))
        for (node,list) in nodelist_
            if length(list) == 2
                x‚ÇÅ = xv[list[1]]
                x‚ÇÇ = xv[list[2]]
                y‚ÇÅ = yv[list[1]]
                y‚ÇÇ = yv[list[2]]
                x‚Çò = 0.5*(x‚ÇÅ+x‚ÇÇ)
                y‚Çò = 0.5*(y‚ÇÅ+y‚ÇÇ)
                n‚ÇÅ = y‚ÇÇ-y‚ÇÅ
                n‚ÇÇ = x‚ÇÅ-x‚ÇÇ
                nc‚ÇÅ = x‚ÇÅ-xc
                nc‚ÇÇ = y‚ÇÅ-yc
                if n‚ÇÅ*nc‚ÇÅ+n‚ÇÇ*nc‚ÇÇ > 0
                    push!(elements[name],Element{:Seg2}([nodes[list[1]],nodes[list[2]]],SNode[]))
                else
                    push!(elements[name],Element{:Seg2}([nodes[list[2]],nodes[list[1]]],SNode[]))
                end
            else
                xc_ = 0.
                yc_ = 0.
                for i in list
                    xc_ += xv[i]
                    yc_ += yv[i]
                end
                xc_ = xc_/length(list)
                yc_ = yc_/length(list)
                Œ± = [atan(yv[i]-yc_,xv[i]-xc_) for i in list]
                p = sortperm(Œ±)
                for i in 1:length(p)
                    (I,J) = i ‚â† length(p) ? (p[i],p[i+1]) : (p[i],p[1])
                    x‚ÇÅ = xv[list[I]]
                    x‚ÇÇ = xv[list[J]]
                    y‚ÇÅ = yv[list[I]]
                    y‚ÇÇ = yv[list[J]]
                    x‚Çò = 0.5*(x‚ÇÅ+x‚ÇÇ)
                    y‚Çò = 0.5*(y‚ÇÅ+y‚ÇÇ)
                    n‚ÇÅ = y‚ÇÇ-y‚ÇÅ
                    n‚ÇÇ = x‚ÇÅ-x‚ÇÇ
                    nc‚ÇÅ = x‚ÇÅ-xc
                    nc‚ÇÇ = y‚ÇÅ-yc
                    if n‚ÇÅ*nc‚ÇÅ+n‚ÇÇ*nc‚ÇÇ > 0
                        push!(elements[name],Element{:Seg2}([nodes[list[I]],nodes[list[J]]],SNode[]))
                    end
                end
            end
        end
    end
    return elements, nodes
end

function voronoimsh(filename::String,config::Dict{T,Any}) where T<:Any
    elms, nds = voronoimsh(filename)
    ~, nodes = importmsh(filename)
    elements = Dict{String,Any}()
    x = getfield(nodes[1],:data)[:x][2]
    y = getfield(nodes[1],:data)[:y][2]
    z = getfield(nodes[1],:data)[:z][2]
    n = config["RegularGrid"]["n"]
    Œ≥ = config["RegularGrid"]["Œ≥"]
    sp = RegularGrid(x,y,z,n=n,Œ≥=Œ≥)
    delete!(config,"RegularGrid")

    for (name,cfg) in config
        element_tag = cfg["ùìí"]["tag"]
        element_type = eval(Meta.parse(cfg["type"]))
        integration_tag = haskey(cfg["ùìñ"],"tag") ? cfg["ùìñ"]["tag"] : element_tag
        integration_type = Meta.parse(cfg["ùìñ"]["type"])
        elements[name] = element_type[]
        if haskey(elms,integration_tag)
            if integration_type == :Node
                data_ = getfield(nodes[1],:data)
                data = Dict([:x=>data_[:x],:y=>data_[:y],:z=>data_[:z]])
                G = 0
                for (c,elm) in enumerate(elms[integration_tag])
                    ùìñ = elm.ùìñ
                    indices = sp(nodes[c])
                    for g in indices
                        G += 1
                        Œæ = SNode((g,G,c,0),data)
                        push!(ùìñ,Œæ)
                    end
                end
                setùê¥!(elms[integration_tag])
                setùíô‚Çò!(elms[integration_tag])
                setm2!(elms[integration_tag])
            else
                setùìñ!(elms[integration_tag],integration_type)
            end
            if haskey(cfg["ùìñ"],"normal") setùíè!(elms[integration_tag]) end
            if integration_tag ‚â† element_tag
                elms[element_tag*"‚à©"*integration_tag] = unique!(elms[element_tag]‚à©elms[integration_tag])
                element_tag = element_tag*"‚à©"*integration_tag
                setùìñ!(elms[element_tag],elms[integration_tag])
            end
            n‚Çë = length(elms[element_tag])
            if haskey(cfg["ùìí"],"type")
                for elm in elms[element_tag]
                    ùìñ = [Œæ for Œæ in elm.ùìñ]
                    push!(elements[name],element_type(Node[],ùìñ))
                end
                position_type= Meta.parse(cfg["ùìí"]["type"])
                if position_type == :Node
                    data_ = getfield(nodes[1],:data)
                    data = Dict([:x=>(2,data_[:x][2]),:y=>(2,data_[:y][2]),:z=>(2,data_[:z][2])])
                    for (c,elm) in enumerate(elms[element_tag])
                        ùìñ = elm.ùìñ
                        indices = sp(nodes[c])
                        for (g,G) in enumerate(indices)
                            Œæ = SNode((g,G,c,0),data)
                            push!(ùìñ,Œæ)
                        end
                    end
                else
                    setùìñ!(elms[element_tag],position_type)
                end
                for (c,elm) in enumerate(elms[element_tag])
                    ùìí = [nodes[i] for i in sp(elm.ùìñ)]
                    push!(elements[name][c].ùìí,ùìí...)
                end
            else
                for elm in elms[element_tag]
                    ùìí = [nodes[i] for i in sp(elm.ùìí)]
                    ùìñ = [Œæ for Œæ in elm.ùìñ]
                    push!(elements[name],element_type(ùìí,ùìñ))
                end
            end
            s = 0
            for elm in elements[name]
                ùìñ = elm.ùìñ
                data = getfield(ùìñ[1],:data)
                n = length(elm.ùìí)
                for (i,Œæ) in enumerate(ùìñ)
                    g = Œæ.ùëî
                    G = Œæ.ùê∫
                    C = Œæ.ùê∂
                    ùìñ[i] = SNode((g,G,C,s),data)
                    s += n
                end
            end

            # set shape memory
            if haskey(cfg,"ùìñ")
                if haskey(cfg["ùìñ"],"ùù≠") set_memory_ùù≠!(elements[name],shape_function[Meta.parse(cfg["ùìñ"]["ùù≠"])]...) end
                if element_type<:ReproducingKernel set_memory_ùó†!(elements[name],moment_matrix[Meta.parse(cfg["ùìñ"]["ùù≠"])]...) end
            end
        end
    end
    return elements, nodes
end

