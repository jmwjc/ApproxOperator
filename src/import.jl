

"""
setgeometry!(ap::T) where T<:AbstractElement
"""
function setgeometry!(ap::T) where T<:AbstractElement
    ùìñ = ap.ùìñ
    for x in ùìñ
        ùíô = getùíô(ap,x)
        ùë§ = getùë§(ap,x)
        x.x = ùíô[1]
        x.y = ùíô[2]
        x.z = ùíô[3]
        x.ùë§ = ùë§
    end
end

"""
set_memory_ùù≠!(ap::T,ss::Symbol...) where T<:AbstractElement
"""
function set_memory_ùù≠!(aps::Vector{T},ss::Symbol...) where T<:AbstractElement
    n = sum(length(ap.ùìí)*length(ap.ùìñ) for ap in aps)
    for s in ss
        push!(getfield(aps[1].ùìñ[1],:data),s=>(3,zeros(n)))
    end
end

"""
set_memory_ùó†!(aps::Vector{T},ss::Symbol... = keys(aps[1].ùó†)...) where T<:ReproducingKernel
"""
function set_memory_ùó†!(aps::Vector{T},ss::Symbol... = keys(aps[1].ùó†)...) where T<:ReproducingKernel
    set_memory_ùó†!(aps[1],ss...)
end

function set_memory_ùó†!(ap::T,ss::Symbol... = keys(ap[1].ùó†)...) where T<:ReproducingKernel
    n = getùëõùíë(ap)
    n‚ÇÅ = getùëõùíë‚ÇÅ(ap)
    n‚ÇÇ = getùëõùíë‚ÇÇ(ap)
    empty!(ap.ùó†)
    for s in ss
        if s == :‚àáÃÉ
            ap.ùó†[s] = SymMat(n‚ÇÅ)
        elseif s ‚àà (:‚àáÃÉ¬≤,:‚àÇ‚àáÃÉ¬≤‚àÇŒæ,:‚àÇ‚àáÃÉ¬≤‚àÇŒ∑)
            ap.ùó†[s] = SymMat(n‚ÇÇ)
        else
            ap.ùó†[s] = SymMat(n)
        end
    end
end

## ---------------- msh ---------------
function importmsh(filename::String)
    fid = open(filename,"r")
    readline(fid)
    line = readline(fid)
    v_,f_,d_ = split(line," ")
    version = parse(Float64,v_)
    filetype = parse(Int,f_)
    datasize = parse(Int,d_)
    readline(fid)
    if version == 4.1
        elements,nodes = import_msh_4(fid)
    elseif version == 2.2
        elements,nodes = import_msh_2(fid)
    else
        println("Version does not match!")
    end
    return elements, nodes
end

function import_msh_4(fid::IO) end

function import_msh_2(fid::IO)
    etype = Dict(1=>:Seg2,2=>:Tri3,3=>:Quad,15=>:Poi1)
    nodes = Dict{Symbol,Vector{Float64}}()
    elements = Dict{String,Set{Tuple{Symbol,Vector{Int}}}}()
    physicalnames = Dict{Int,String}()
    for line in eachline(fid)
        if line == "\$PhysicalNames"
            numPhysicalNames = parse(Int,readline(fid))
            physicalnames=>Dict{Int,String}()
            for i in 1:numPhysicalNames
                line = readline(fid)
                d_,p_,n_ = split(line," ")
                dimension = parse(Int,d_)
                physicalTag = parse(Int,p_)
                name = strip(n_,'\"')
                physicalnames[physicalTag] = name
                elements[name] = Set{Tuple{Symbol,Vector{Int}}}()
            end
            readline(fid)
        elseif line == "\$Nodes"
            line = readline(fid)
            n‚Çö = parse(Int,line)
            x = zeros(n‚Çö)
            y = zeros(n‚Çö)
            z = zeros(n‚Çö)
            for i in 1:n‚Çö
                line = readline(fid)
                t_,x_,y_,z_ = split(line," ")
                tag = parse(Int,t_)
                x[i] = parse(Float64,x_)
                y[i] = parse(Float64,y_)
                z[i] = parse(Float64,z_)
            end
            nodes[:x] = x
            nodes[:y] = y
            nodes[:z] = z
            readline(fid)
        elseif line == "\$Elements"
            line = readline(fid)
            n‚Çë = parse(Int,line)
            for i in 1:n‚Çë
                line = readline(fid)
                elmN_,elmT_,numT_,phyT_,elmE_,l_... = split(line," ")
                elmNumber = parse(Int,elmN_)
                elmType = parse(Int,elmT_)
                numTag = parse(Int,numT_)
                phyTag = parse(Int,phyT_)
                elmEntary = parse(Int,elmE_)
                nodeList = parse.(Int,l_)
                name = physicalnames[phyTag]
                type = etype[elmType]
                push!(elements[name],(type,nodeList))
            end
            return elements, nodes
        end
    end
end

function importmsh(filename::String,config::Dict{Any,Any})
    elms, nodes = importmsh(filename)
    elements = Dict{String,Any}()
    if haskey(config,"RegularGrid")
        cfg = config["RegularGrid"]
        sp = RegularGrid(nodes[:x],nodes[:y],nodes[:z];n=cfg["n"],Œ≥=cfg["Œ≥"])
        delete!(config,"RegularGrid")
    else
        sp = nothing
    end
    nodes = Node(nodes...)
    for (name,cfg) in config
        Type = eval(Meta.parse(cfg["type"]))
        if Type <: ReproducingKernel
            ùó† = Dict{Symbol,SymMat}()
            elements[name] = [Type([nodes[i] for i in s[2]],ùó†) for s in elms[cfg["ùìí"]["tag"]]]
        else
            elements[name] = [Type([nodes[i] for i in s[2]]) for s in elms[cfg["ùìí"]["tag"]]]
        end
        sp ‚â† nothing ? sp(elements[name]) : nothing
        if haskey(cfg,"ùìñ")
            QType = Meta.parse(cfg["ùìñ"]["type"])
            if haskey(cfg["ùìñ"],"tag")
                elms_ùìñ = [Element{s[1]}([nodes[i] for i in s[2]]) for s in elms[cfg["ùìñ"]["tag"]]]
                elements[name] = elements[name]‚à©elms_ùìñ
                setùìñ!(elms_ùìñ,QType)
                setùìñ!(elements[name],elms_ùìñ)
            else
                setùìñ!(elements[name],QType)
            end
            n‚Çë = length(elements[name])
            n·µ¢ = length(quadraturerule(QType)[:w])
            push!(getfield(elements[name][1].ùìñ[1],:data),:x=>(2,zeros(n‚Çë*n·µ¢)),:y=>(2,zeros(n‚Çë*n·µ¢)),:z=>(2,zeros(n‚Çë*n·µ¢)),:ùë§=>(2,zeros(n‚Çë*n·µ¢)))
            setgeometry!.(elements[name])
            if haskey(cfg["ùìñ"],"ùù≠")
                ss = Meta.parse.(cfg["ùìñ"]["ùù≠"])
                Type<:ReproducingKernel ? set_memory_ùó†!(elements[name],ss...) : nothing
                set_memory_ùù≠!(elements[name],ss...)
            end
        end
    end
    return elements
end
