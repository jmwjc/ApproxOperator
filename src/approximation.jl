## Actions for general functions
@inline get_global_indice(ap::Approximator,i::Int) = ap.id[i]
@inline get_number_of_indices(ap::Approximator) = length(ap.id)
@inline get_local_node(ap::Approximator,i::Int) = ap.nd[ap.id[i]].x
@inline get_shape_functions(ap::Approximator,Œæ::AbstractVector{Float64},gs::Val...) = (get_shape_functions(ap,Œæ,g) for g in gs)

## AbstractPoi
get_jacobe(::AbstractPoi,::AbstractVector{Float64}) = 1.
get_coordinates(ap::AbstractPoi,::AbstractVector{Float64}) = 1.0*ap.nd[ap.id[1]]

# --------------- Poi1 ---------------
struct Poi1 <: AbstractPoi
    ùíô::Vector{PhysicalNode}
    ùìò::Int
    ùìñ::Vector{ParametricNode}
end

# constructions of Poi1
Poi1(nd::Vector{Node},d::Int;qw::Symbol=:PoiGI1) = Poi1(nd,id,QuadratureRule[qw])

# actions of Poi1
get_shape_functions(::Poi1,::AbstractVector{Float64},::Val{:‚àÇ1}) = 1.
get_shape_functions(::Poi1,::AbstractVector{Float64},::Val{:‚àÇx}) = 1.


## AbstractSeg
get_jacobe(ap::AbstractSeg,::AbstractVector{Float64}) = ap.norm/2
function get_coordinates(ap::AbstractSeg,Œæ::AbstractVector{Float64})
    N1 = (1.0-Œæ[1])*0.5
    N2 = (1.0+Œæ[1])*0.5
    return N1*ap.nd[ap.id[1]].x + N2*ap.nd[ap.id[2]].x
end
function get_coordinates(ap1::AbstractSeg,ap2::AbstractPoi,::AbstractVector{Float64})
    id‚ÇÅ = findfirst(x -> x == ap2.id[1], ap1.id)
    return (id‚ÇÅ == 1 ? -1. : 1.)
end
function get_normal(ap::AbstractSeg)
    L = ap.nm
    x1 = ap.nd[ap.id[1]].x[1]
    y1 = ap.nd[ap.id[1]].x[2]
    x2 = ap.nd[ap.id[2]].x[1]
    y2 = ap.nd[ap.id[2]].x[2]
    return (y2-y1)/L,(x1-x2)/L,0.
end
function get_normal(ap1::AbstractSeg,ap2::AbstractPoi)
    id‚ÇÅ = findfirst(x -> x == ap2.id[1], ap1.id)
    return (id‚ÇÅ == 1 ? (-1.,0.,0.) : (1.,0.,0.))
end

# --------------- Seg2 ---------------
struct Seg2 <: AbstractSeg
    nd::Vector{PhysicalNode}
    id::Vector{Int}
    qw::Vector{ParametricNode}
    nm::Float64
end

# constructions of Seg2
function Seg2(nd::Vector{PhysicalNode},id::Vector{Int};qw::Symbol=:SegGI2)
    L = norm(nd[id[2]].x - nd[id[1]].x)
    qw = QuadratureRule[qw]
    return Seg2(nd,id,qw,L)
end
function Seg2(nd::Vector{PhysicalNode},ids::Vector{Vector{Int}};qw::Symbol=:SegGI2)
    return [Seg2(nd,id,qw=qw) for id in ids]
end

# actions of Seg2
get_shape_functions(::Seg2,Œæ::AbstractVector{Float64},::Val{:‚àÇ1}) = SVector{2,Float64}((1.0-Œæ[1])*0.5,(1.0+Œæ[1])*0.5)
function get_shape_functions(ap::Seg2,::AbstractVector{Float64},::Val{:‚àÇx})
    x1 = ap.nd[ap.id[1]].x[1]
    x2 = ap.nd[ap.id[2]].x[1]
    return SVector{2,Float64}(-1.0/(x2-x1),1.0/(x2-x1))
end
get_shape_functions(::Seg2,Œæ::AbstractVector{Float64},::Val{:‚àÇy}) = SVector{2,Float64}(0.,0.)
get_shape_functions(::Seg2,Œæ::AbstractVector{Float64},::Val{:‚àÇz}) = SVector{2,Float64}(0.,0.)

## AbstractTri
get_jacobe(ap::AbstractTri,Œæ::AbstractVector{Float64}) = ap.nm
function get_coordinates(ap::AbstractTri,Œæ::AbstractVector{Float64})
    return Œæ[1]*ap.nd[ap.id[1]].x +
           Œæ[2]*ap.nd[ap.id[2]].x +
           (1-Œæ[1]-Œæ[2])*ap.nd[ap.id[3]].x
end
function get_coordinates(ap1::AbstractTri,ap2::AbstractSeg,Œæ::AbstractVector{Float64})
    id‚ÇÅ = findfirst(x -> x == ap2.id[1], ap1.id)
    id‚ÇÇ = findfirst(x -> x == ap2.id[2], ap1.id)
    return SVector{2,Float64}((1-Œæ[1])/2*(id‚ÇÅ == 1) + (1+Œæ[1])/2*(id‚ÇÇ == 1),
                              (1-Œæ[1])/2*(id‚ÇÅ == 2) + (1+Œæ[1])/2*(id‚ÇÇ == 2))
end
function get_normal(ap::AbstractTri)
    A = ap.nm
    x1 = ap.nd[ap.id[1]].x[1]
    y1 = ap.nd[ap.id[1]].x[2]
    z1 = ap.nd[ap.id[1]].x[3]
    x2 = ap.nd[ap.id[2]].x[1]
    y2 = ap.nd[ap.id[2]].x[2]
    z2 = ap.nd[ap.id[2]].x[3]
    x3 = ap.nd[ap.id[3]].x[1]
    y3 = ap.nd[ap.id[3]].x[2]
    z3 = ap.nd[ap.id[3]].x[3]
    Ax = 0.5*(y1*z2+y2*z3+y3*z1-y2*z1-y3x*z2-y1*z3)
    Ay = 0.5*(z1*x2+z2*x3+z3*x1-z2*x1-z3x*x2-z1*x3)
    Az = 0.5*(x1*y2+x2*y3+x3*y1-x2*y1-x3x*y2-x1*y3)
    return Ax/A,Ay/A,Az/A
end
function get_normal(ap1::AbstractTri,ap2::AbstractSeg)
    id‚ÇÅ = findfirst(x -> x == ap2.id[1], ap1.id)
    id‚ÇÇ = findfirst(x -> x == ap2.id[2], ap1.id)
    x1 = ap1.nd[ap1.id[id‚ÇÅ]].x[1]
    y1 = ap1.nd[ap1.id[id‚ÇÅ]].x[2]
    x2 = ap1.nd[ap1.id[id‚ÇÇ]].x[1]
    y2 = ap1.nd[ap1.id[id‚ÇÇ]].x[2]
    L = ap2.nm
    return (y2-y1)/L,(x1-x2)/L,0.
end

# --------------- Tri3 ---------------
# Constant strain triangular Approximator (CST)
struct Tri3 <: AbstractTri
    nd :: Vector{PhysicalNode}
    id :: Vector{Int}
    qw::Vector{ParametricNode}
    nm :: Float64
end

# constructions
function Tri3(x::Vector{PhysicalNode},id::Vector{Int};qw::Symbol=:TriGI3)
    x1 = x[id[1]].x[1]
    y1 = x[id[1]].x[2]
    z1 = x[id[1]].x[3]
    x2 = x[id[2]].x[1]
    y2 = x[id[2]].x[2]
    z2 = x[id[2]].x[3]
    x3 = x[id[3]].x[1]
    y3 = x[id[3]].x[2]
    z3 = x[id[3]].x[3]
    Ax = 0.5*(y1*z2+y2*z3+y3*z1-y2*z1-y3*z2-y1*z3)
    Ay = 0.5*(z1*x2+z2*x3+z3*x1-z2*x1-z3*x2-z1*x3)
    Az = 0.5*(x1*y2+x2*y3+x3*y1-x2*y1-x3*y2-x1*y3)
    A = (Ax^2 + Ay^2 + Az^2)^0.5
    qw = QuadratureRule[qw]
    return Tri3(x,id,qw,A)
end

# actions
get_shape_functions(ap::Tri3,Œæ::AbstractVector{Float64},::Val{:‚àÇ1}) = SVector{3,Float64}(Œæ[1],Œæ[2],1-Œæ[1]-Œæ[2])
function get_shape_functions(ap::Tri3,Œæ::AbstractVector{Float64},::Val{:‚àÇx})
    y1 = ap.nd[ap.id[1]].x[2]
    y2 = ap.nd[ap.id[2]].x[2]
    y3 = ap.nd[ap.id[3]].x[2]
    A = ap.nm
    return SVector{3,Float64}((y2-y3)/(2A),(y3-y1)/(2A),(y1-y2)/(2A))
end
function get_shape_functions(ap::Tri3,Œæ::AbstractVector{Float64},::Val{:‚àÇy})
    x1 = ap.nd[ap.id[1]].x[1]
    x2 = ap.nd[ap.id[2]].x[1]
    x3 = ap.nd[ap.id[3]].x[1]
    A = ap.nm
    return SVector{3,Float64}((x3-x2)/(2A),(x1-x3)/(2A),(x2-x1)/(2A))
end
get_shape_functions(ap::Tri3,Œæ::AbstractVector{Float64},::Val{:‚àÇz}) = SVector{3,Float64}(0.,0.,0.)

## AbstractQuad
function get_jacobe(ap::AbstractQuad,Œæ::AbstractVector{Float64})
    J‚ÇÅ‚ÇÅ,J‚ÇÇ‚ÇÅ,J‚ÇÅ‚ÇÇ,J‚ÇÇ‚ÇÇ = get_jacobe_matrix(ap,Œæ)
    return J‚ÇÅ‚ÇÅ*J‚ÇÇ‚ÇÇ-J‚ÇÇ‚ÇÅ*J‚ÇÅ‚ÇÇ
end
function get_jacobe_matrix(ap::AbstractQuad,Œæ::AbstractVector{Float64})
    x‚ÇÅ = ap.nd[ap.id[1]].x[1]
    x‚ÇÇ = ap.nd[ap.id[2]].x[1]
    x‚ÇÉ = ap.nd[ap.id[3]].x[1]
    x‚ÇÑ = ap.nd[ap.id[4]].x[1]
    y‚ÇÅ = ap.nd[ap.id[1]].x[2]
    y‚ÇÇ = ap.nd[ap.id[2]].x[2]
    y‚ÇÉ = ap.nd[ap.id[3]].x[2]
    y‚ÇÑ = ap.nd[ap.id[4]].x[2]
    ‚àÇN‚ÇÅ‚àÇŒæ,‚àÇN‚ÇÇ‚àÇŒæ,‚àÇN‚ÇÉ‚àÇŒæ,‚àÇN‚ÇÑ‚àÇŒæ = get_shape_functions(ap,Œæ,Val(:‚àÇŒæ))
    ‚àÇN‚ÇÅ‚àÇŒ∑,‚àÇN‚ÇÇ‚àÇŒ∑,‚àÇN‚ÇÉ‚àÇŒ∑,‚àÇN‚ÇÑ‚àÇŒ∑ = get_shape_functions(ap,Œæ,Val(:‚àÇŒ∑))
    J‚ÇÅ‚ÇÅ = ‚àÇN‚ÇÅ‚àÇŒæ*x‚ÇÅ + ‚àÇN‚ÇÇ‚àÇŒæ*x‚ÇÇ + ‚àÇN‚ÇÉ‚àÇŒæ*x‚ÇÉ + ‚àÇN‚ÇÑ‚àÇŒæ*x‚ÇÑ
    J‚ÇÅ‚ÇÇ = ‚àÇN‚ÇÅ‚àÇŒ∑*x‚ÇÅ + ‚àÇN‚ÇÇ‚àÇŒ∑*x‚ÇÇ + ‚àÇN‚ÇÉ‚àÇŒ∑*x‚ÇÉ + ‚àÇN‚ÇÑ‚àÇŒ∑*x‚ÇÑ
    J‚ÇÇ‚ÇÅ = ‚àÇN‚ÇÅ‚àÇŒæ*y‚ÇÅ + ‚àÇN‚ÇÇ‚àÇŒæ*y‚ÇÇ + ‚àÇN‚ÇÉ‚àÇŒæ*y‚ÇÉ + ‚àÇN‚ÇÑ‚àÇŒæ*y‚ÇÑ
    J‚ÇÇ‚ÇÇ = ‚àÇN‚ÇÅ‚àÇŒ∑*y‚ÇÅ + ‚àÇN‚ÇÇ‚àÇŒ∑*y‚ÇÇ + ‚àÇN‚ÇÉ‚àÇŒ∑*y‚ÇÉ + ‚àÇN‚ÇÑ‚àÇŒ∑*y‚ÇÑ
    return J‚ÇÅ‚ÇÅ,J‚ÇÇ‚ÇÅ,J‚ÇÅ‚ÇÇ,J‚ÇÇ‚ÇÇ
end
function get_coordinates(ap::AbstractQuad,Œæ::AbstractVector{Float64})
    N‚ÇÅ,N‚ÇÇ,N‚ÇÉ,N‚ÇÑ = get_shape_functions(ap,Œæ,Val(:‚àÇ1))
    return N‚ÇÅ*ap.nd[ap.id[1]] +
           N‚ÇÇ*ap.nd[ap.id[2]] +
           N‚ÇÉ*ap.nd[ap.id[3]] +
           N‚ÇÑ*ap.nd[ap.id[4]]
end
function get_coordinates(ap1::AbstractQuad,ap2::AbstractSeg,Œæ::AbstractVector{Float64})
    id‚ÇÅ = findfirst(x -> x == ap2.id[1], ap1.id)
    id‚ÇÇ = findfirst(x -> x == ap2.id[2], ap1.id)
    return SVector{2,Float64}((1-Œæ[1])/2*(id‚ÇÅ == 1)*(id‚ÇÇ == 2) + (1+Œæ[1])/2*(id‚ÇÅ == 3)*(id‚ÇÇ == 4),
                              (1-Œæ[1])/2*(id‚ÇÅ == 2)*(id‚ÇÇ == 3) + (1+Œæ[1])/2*(id‚ÇÅ == 4)*(id‚ÇÇ == 1))
end

# --------------- Quad ---------------
mutable struct Quad <: AbstractQuad
    nd :: Vector{PhysicalNode}
    id :: Vector{Int}
    qw::Vector{ParametricNode}
end
# constructions
function Quad(x::Vector{PhysicalNode},id::Vector{Int};qw::Symbol=:QuadGI2)
    qw = QuadratureRule[qw]
    return Quad(x,id,qw)
end

# actions
function get_shape_functions(ap::Quad,Œæ::AbstractVector{Float64},::Val{:‚àÇ1})
    N‚ÇÅ = (1-Œæ[1])*(1-Œæ[2])/4
    N‚ÇÇ = (1+Œæ[1])*(1-Œæ[2])/4
    N‚ÇÉ = (1+Œæ[1])*(1+Œæ[2])/4
    N‚ÇÑ = (1-Œæ[1])*(1+Œæ[2])/4
    return SVector{4,Float64}(N‚ÇÅ,N‚ÇÇ,N‚ÇÉ,N‚ÇÑ)
end
function get_shape_functions(ap::Quad,Œæ::AbstractVector{Float64},::Val{:‚àÇŒæ})
    ‚àÇN‚ÇÅ‚àÇŒæ = - (1-Œæ[2])/4
    ‚àÇN‚ÇÇ‚àÇŒæ =   (1-Œæ[2])/4
    ‚àÇN‚ÇÉ‚àÇŒæ =   (1+Œæ[2])/4
    ‚àÇN‚ÇÑ‚àÇŒæ = - (1+Œæ[2])/4
    return SVector{4,Float64}(‚àÇN‚ÇÅ‚àÇŒæ,‚àÇN‚ÇÇ‚àÇŒæ,‚àÇN‚ÇÉ‚àÇŒæ,‚àÇN‚ÇÑ‚àÇŒæ)
end
function get_shape_functions(ap::Quad,Œæ::AbstractVector{Float64},::Val{:‚àÇŒ∑})
    ‚àÇN‚ÇÅ‚àÇŒ∑ = - (1-Œæ[1])/4
    ‚àÇN‚ÇÇ‚àÇŒ∑ = - (1+Œæ[1])/4
    ‚àÇN‚ÇÉ‚àÇŒ∑ =   (1+Œæ[1])/4
    ‚àÇN‚ÇÑ‚àÇŒ∑ =   (1-Œæ[1])/4
    return SVector{4,Float64}(‚àÇN‚ÇÅ‚àÇŒ∑,‚àÇN‚ÇÇ‚àÇŒ∑,‚àÇN‚ÇÉ‚àÇŒ∑,‚àÇN‚ÇÑ‚àÇŒ∑)
end
function get_shape_functions(ap::Quad,Œæ::AbstractVector{Float64},::Val{:‚àÇx},::Val{:‚àÇy})
    x‚ÇÅ = ap.nd[ap.id[1]].x[1]
    x‚ÇÇ = ap.nd[ap.id[2]].x[1]
    x‚ÇÉ = ap.nd[ap.id[3]].x[1]
    x‚ÇÑ = ap.nd[ap.id[4]].x[1]
    y‚ÇÅ = ap.nd[ap.id[1]].x[2]
    y‚ÇÇ = ap.nd[ap.id[2]].x[2]
    y‚ÇÉ = ap.nd[ap.id[3]].x[2]
    y‚ÇÑ = ap.nd[ap.id[4]].x[2]
    ‚àÇN‚ÇÅ‚àÇŒæ,‚àÇN‚ÇÇ‚àÇŒæ,‚àÇN‚ÇÉ‚àÇŒæ,‚àÇN‚ÇÑ‚àÇŒæ = get_shape_functions(ap,Œæ,Val(:‚àÇŒæ))
    ‚àÇN‚ÇÅ‚àÇŒ∑,‚àÇN‚ÇÇ‚àÇŒ∑,‚àÇN‚ÇÉ‚àÇŒ∑,‚àÇN‚ÇÑ‚àÇŒ∑ = get_shape_functions(ap,Œæ,Val(:‚àÇŒ∑))
    ‚àÇx‚àÇŒæ = ‚àÇN‚ÇÅ‚àÇŒæ*x‚ÇÅ + ‚àÇN‚ÇÇ‚àÇŒæ*x‚ÇÇ + ‚àÇN‚ÇÉ‚àÇŒæ*x‚ÇÉ + ‚àÇN‚ÇÑ‚àÇŒæ*x‚ÇÑ
    ‚àÇx‚àÇŒ∑ = ‚àÇN‚ÇÅ‚àÇŒ∑*x‚ÇÅ + ‚àÇN‚ÇÇ‚àÇŒ∑*x‚ÇÇ + ‚àÇN‚ÇÉ‚àÇŒ∑*x‚ÇÉ + ‚àÇN‚ÇÑ‚àÇŒ∑*x‚ÇÑ
    ‚àÇy‚àÇŒæ = ‚àÇN‚ÇÅ‚àÇŒæ*y‚ÇÅ + ‚àÇN‚ÇÇ‚àÇŒæ*y‚ÇÇ + ‚àÇN‚ÇÉ‚àÇŒæ*y‚ÇÉ + ‚àÇN‚ÇÑ‚àÇŒæ*y‚ÇÑ
    ‚àÇy‚àÇŒ∑ = ‚àÇN‚ÇÅ‚àÇŒ∑*y‚ÇÅ + ‚àÇN‚ÇÇ‚àÇŒ∑*y‚ÇÇ + ‚àÇN‚ÇÉ‚àÇŒ∑*y‚ÇÉ + ‚àÇN‚ÇÑ‚àÇŒ∑*y‚ÇÑ
    detJ = ‚àÇx‚àÇŒæ*‚àÇy‚àÇŒ∑ - ‚àÇx‚àÇŒ∑*‚àÇy‚àÇŒæ
    ‚àÇŒæ‚àÇx =   ‚àÇy‚àÇŒ∑/detJ
    ‚àÇŒ∑‚àÇx = - ‚àÇy‚àÇŒæ/detJ
    ‚àÇŒæ‚àÇy = - ‚àÇx‚àÇŒ∑/detJ
    ‚àÇŒ∑‚àÇy =   ‚àÇx‚àÇŒæ/detJ
    ‚àÇN‚ÇÅ‚àÇx = ‚àÇN‚ÇÅ‚àÇŒæ*‚àÇŒæ‚àÇx + ‚àÇN‚ÇÅ‚àÇŒ∑*‚àÇŒ∑‚àÇx
    ‚àÇN‚ÇÇ‚àÇx = ‚àÇN‚ÇÇ‚àÇŒæ*‚àÇŒæ‚àÇx + ‚àÇN‚ÇÇ‚àÇŒ∑*‚àÇŒ∑‚àÇx
    ‚àÇN‚ÇÉ‚àÇx = ‚àÇN‚ÇÉ‚àÇŒæ*‚àÇŒæ‚àÇx + ‚àÇN‚ÇÉ‚àÇŒ∑*‚àÇŒ∑‚àÇx
    ‚àÇN‚ÇÑ‚àÇx = ‚àÇN‚ÇÑ‚àÇŒæ*‚àÇŒæ‚àÇx + ‚àÇN‚ÇÑ‚àÇŒ∑*‚àÇŒ∑‚àÇx
    ‚àÇN‚ÇÅ‚àÇy = ‚àÇN‚ÇÅ‚àÇŒæ*‚àÇŒæ‚àÇy + ‚àÇN‚ÇÅ‚àÇŒ∑*‚àÇŒ∑‚àÇy
    ‚àÇN‚ÇÇ‚àÇy = ‚àÇN‚ÇÇ‚àÇŒæ*‚àÇŒæ‚àÇy + ‚àÇN‚ÇÇ‚àÇŒ∑*‚àÇŒ∑‚àÇy
    ‚àÇN‚ÇÉ‚àÇy = ‚àÇN‚ÇÉ‚àÇŒæ*‚àÇŒæ‚àÇy + ‚àÇN‚ÇÉ‚àÇŒ∑*‚àÇŒ∑‚àÇy
    ‚àÇN‚ÇÑ‚àÇy = ‚àÇN‚ÇÑ‚àÇŒæ*‚àÇŒæ‚àÇy + ‚àÇN‚ÇÑ‚àÇŒ∑*‚àÇŒ∑‚àÇy
    return SVector{4,Float64}(‚àÇN‚ÇÅ‚àÇx,‚àÇN‚ÇÇ‚àÇx,‚àÇN‚ÇÉ‚àÇx,‚àÇN‚ÇÑ‚àÇx),SVector{4,Float64}(‚àÇN‚ÇÅ‚àÇy,‚àÇN‚ÇÇ‚àÇy,‚àÇN‚ÇÉ‚àÇy,‚àÇN‚ÇÑ‚àÇy)
end

get_shape_functions(ap::Quad,Œæ::AbstractVector{Float64},::Val{:‚àÇz}) = SVector{4,Float64}(0.,0.,0.,0.)
@inline get_shape_functions(ap::Quad,Œæ::AbstractVector{Float64},::Val{:‚àÇ1},::Val{:‚àÇx},::Val{:‚àÇy}) = get_shape_functions(ap,Œæ,Val(:‚àÇ1)),get_shape_functions(ap,Œæ,Val(:‚àÇx),Val(:‚àÇy))...
@inline get_shape_functions(ap::Quad,Œæ::AbstractVector{Float64},::Val{:‚àÇ1},::Val{:‚àÇx},::Val{:‚àÇy},::Val{:‚àÇz}) = get_shape_functions(ap,Œæ,Val(:‚àÇ1)),get_shape_functions(ap,Œæ,Val(:‚àÇx),Val(:‚àÇy))...,get_shape_functions(ap,Œæ,Val(:‚àÇz))
