
using ApproxOperator, LinearAlgebra

aps = import_msh("./msh/cube_pfm.msh")
n‚Çö = length(aps["surface"][1].nodes)
set_integration_rule!(aps["surface"],Val(:PhaseFieldFriction))

E = 2.0e11
ŒΩ = 0.3
c = 40
ùúô = 15/180*œÄ
ùúô·µ£ = 15/180*œÄ
Œ∏ = 0.
u‚ÇÄ = 5.0e-3
nls = 50
kÃÑ = 2700
l = 0.01
tol = 1e-10
maxiter = 50

b = (x,y,z)->(0.0,0.0)
n = (x,y,z)->(1.0,0.0,1.0)
uÃÑ = (x,y,z)->(0.0,0.0,0.0)

ops = [
    NonlinearPlaneStress_C_Œ©(b),
    NonlinearPlaneStress_Œì·µç_penalty(uÃÑ,n,E*1e7),
    SecondOrderPhaseField(kÃÑ,l),
    Update_Friction_PhaseField_PlaneStress(E,ŒΩ,c,ùúô,ùúô·µ£,1e-6),
    VTKExport(
                filename="figure/movie00.vtk",
                topic="phase field modeling fracture",
                parameters=Dict{String,Float64}("E"=>E,"ŒΩ"=>ŒΩ)
            )
]

d = zeros(2*n‚Çö)
k = zeros(2*n‚Çö,2*n‚Çö)
f = zeros(2*n‚Çö)
k·µ• = zeros(n‚Çö,n‚Çö)
f·µ• = zeros(n‚Çö)
d·µ• = zeros(n‚Çö)
d·µó = zeros(n‚Çö)

ops[5](aps["surface"],d,d·µ•,Val(:PFM_PlaneStress))

for t in 1:nls
    # define essential BC
    u = (x,y,z)->(cos(Œ∏)*u‚ÇÄ/nls*t,sin(Œ∏)*u‚ÇÄ/nls*t)
    op_EBC = NonlinearPlaneStress_Œì·µç_penalty(u,n,E*1e7)
    iter = 0

    # Alternate minimization algorithm
    while iter ‚â§ maxiter
        d·µó .= d·µ•
        iter += 1

        # update history field
        ops[4](aps["surface"],d,d·µ•)

        # loop of elasticity
        iteru = 0
        while iteru ‚â§ maxiter
            iteru += 1
            fill!(k,0.0)
            fill!(f,0.0)
            ops[1](aps["surface"],k,f)
            ops[2](aps["disp_fix"],k,f,d)
            op_EBC(aps["disp"],k,f,d)
            erru = norm(f)/E/1e7
            print("u: time step = $t, alternate iter = $iter, disp iter = $iteru, erru = $erru\n")
            if erru < tol;break;end
            d .+= k\f
        end

        # loop of phase field
        iterv = 0
        while iterv ‚â§ maxiter
            iterv += 1
            fill!(k·µ•,0.0)
            fill!(f·µ•,0.0)
            ops[3](aps["surface"],k·µ•,f·µ•,d·µ•)
            errv = norm(f·µ•)/kÃÑ
            print("v: time step = $t, alternate iter = $iter, damage iter = $iterv, errv = $errv\n")
            if errv < tol;break;end
            d·µ• .+= k·µ•\f·µ•
        end

        err = norm(d·µó .- d·µ•)/norm(d·µ•)
        print("err = $err\n")
        if err < tol;break;end
    end
    for ap in aps["surface"]
        for qw in ap.qw
            qw.‚Ñã‚Çô = qw.‚Ñã
            qw.‚Ñã‚Çò = max(qw.‚Ñã‚Çò,qw.‚Ñã‚Çô)
        end
    end
    # export to VTK file
    ops[5].filename = "figure/movie"*string(t,pad=2)*".vtk"
    ops[5](aps["surface"],d,d·µ•,Val(:PFM_PlaneStress))
end
