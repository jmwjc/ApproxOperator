# This file contains functions for 1D bar analysis, the whole domain denoted by Œ© = (0,L) can be discretized by a set of nodes,

using Revise
using ApproxOperator
using BenchmarkTools

## FEM
# nodes,elements = importdata("./msh/bar.msh")
# setùìñ(elements["Domain"],:SegGI2)
# setùìñ(elements["EBC"],:PoiGI1)
# setùìñ(elements["NBC"],:PoiGI1)

## MESHFREE
# nodes,elements = importdata("./msh/bar.msh",ùíë=:Quadratic1D,ùë†=:‚ñ°,ùúô=:CubicSpline)
# n‚Çö = length(nodes[:x])
# sp = RegularGrid(nodes[:x],nodes[:y],nodes[:z],n=2,Œ≥=1)
# sp(elements["Domain"])
# sp(elements["EBC"])
# sp(elements["NBC"])
# s = 0.25*ones(n‚Çö)
# push!(nodes,:s‚ÇÅ=>s,:s‚ÇÇ=>s,:s‚ÇÉ=>s)
# setùìñ(elements["Domain"],:SegGI5,:‚àÇ1,:‚àÇx,:‚àÇy,:‚àÇz)
# setùìñ(elements["EBC"],:PoiGI1,:‚àÇ1)
# setùìñ(elements["NBC"],:PoiGI1,:‚àÇ1)

# nodes,elements = importdata("./msh/bar.msh",1=>:SNode,ùíë=:Linear1D,ùë†=:‚ñ°,ùúô=:CubicSpline)
# n‚Çö = length(nodes[:x])
# sp = RegularGrid(nodes[:x],nodes[:y],nodes[:z],n=1,Œ≥=1)
# sp(elements["Domain"])
# sp(elements["EBC"])
# sp(elements["NBC"])
# s = 0.15*ones(n‚Çö)
# push!(nodes,:s‚ÇÅ=>s,:s‚ÇÇ=>s,:s‚ÇÉ=>s)
# setùìñ(elements["Domain"],:SegGI5,:‚àÇ1,:‚àÇx,:‚àÇy,:‚àÇz,ntype=:SNode)
# setùìñ(elements["EBC"],:PoiGI1,:‚àÇ1)
# setùìñ(elements["NBC"],:PoiGI1,:‚àÇ1)
# set‚àáùù≠(elements["Domain"])

## RK
nodes, elements = importdata(
  "./msh/bar.msh",
  1 => :SNode,
  ùíë = :Quadratic1D,
  ùë† = :‚ñ°,
  ùúô = :CubicSpline,
)
n‚Çö = length(nodes[:x])
sp = RegularGrid(nodes[:x], nodes[:y], nodes[:z], n = 2, Œ≥ = 1)
sp(elements["Domain"])
sp(elements["EBC"])
sp(elements["NBC"])
s = 0.25 * ones(n‚Çö)
push!(nodes, :s‚ÇÅ => s, :s‚ÇÇ => s, :s‚ÇÉ => s)
elements["DomainGS"] = SegN{SNode,:Linear1D,:‚ñ°,:CubicSpline}(elements["Domain"])
elements["LEBC"] = Poi1(elements["EBC"], renumbering = true)
setùìñ(elements["Domain"], :SegRK3, :‚àÇ1, :‚àÇx, :‚àÇy, :‚àÇz, ntype = :SNode)
setùìñ(elements["DomainGS"], :SegGI2, :‚àÇ1, :‚àÇx, :‚àÇy, :‚àÇz, ntype = :SNode)
setùìñ(elements["EBC"], :PoiGI1, :‚àÇ1)
setùìñ(elements["NBC"], :PoiGI1, :‚àÇ1)
setùìñ(elements["LEBC"], :PoiGI1)
prescribe!(elements["Domain"], :n‚ÇÅ, (x, y, z) -> 0.0)
setùíè(elements["Domain"])
setùù≠(elements["Domain"])
set‚àáÃÉùù≠(elements["DomainGS"], elements["Domain"])

coefficients = (:k => 1.0, :Œ± => 1e7)
# op = Operator(:‚à´‚àáv‚àáuvbdŒ©,coefficients...)
op = Operator(:‚à´vbdŒ©, coefficients...)
opgs = Operator(:‚à´‚àáv‚àáudŒ©, coefficients...)
op1 = Operator(:‚à´vgdŒì, coefficients...)
opn = Operator(:‚à´vtdŒì, coefficients...)
opl = Operator(:‚à´ŒªudŒì, coefficients...)
r = 3
prescribe!(elements["NBC"], :t, (x, y, z) -> r * x^abs(r - 1))
prescribe!(elements["EBC"], :g, (x, y, z) -> x^r)
prescribe!(elements["Domain"], :b, (x, y, z) -> -r * abs(r - 1) * x^abs(r - 2))

k = zeros(n‚Çö, n‚Çö)
f = zeros(n‚Çö)
# d = zeros(n‚Çö)
d = zeros(n‚Çö + 1)
q = [0.0]
g = zeros(n‚Çö, 1)
push!(nodes, :d => d)
# op(elements["Domain"],k,f)
op(elements["Domain"], f)
opgs(elements["DomainGS"], k)
# op1(elements["EBC"],k,f)
opn(elements["NBC"], f)
opl(elements["EBC"], elements["LEBC"], g, q)
# d .= k\f
d .= [k g; g' 0] \ [f; q]

setùìñ(elements["Domain"], :SegGI10, :‚àÇ1, :‚àÇx, :‚àÇy, :‚àÇz, ntype = :SNode)
set‚àáùù≠(elements["Domain"])
prescribe!(elements["Domain"], :u, (x, y, z) -> x^r)
prescribe!(elements["Domain"], :‚àÇu‚àÇx, (x, y, z) -> r * x^abs(r - 1))
prescribe!(elements["Domain"], :‚àÇu‚àÇy, (x, y, z) -> 0.0)
prescribe!(elements["Domain"], :‚àÇu‚àÇz, (x, y, z) -> 0.0)
l2 = Operator(:L‚ÇÇ)
h1 = Operator(:H‚ÇÅ)
l2error = l2(elements["Domain"])
h1error, l2error = h1(elements["Domain"])
